#
# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.7'

services:
  hbase-master:
    image: oisp/hbase:${DOCKER_TAG}
    entrypoint: bash /opt/wait-for-it.sh hdfs-namenode:8020 -t 300 -- bash /opt/wait-for-it.sh zookeeper:2181 -t 300 -- /opt/entrypoint.sh
    build:
      context: ./docker-hbase/
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_PLATFORM_LAUNCHER}
    ports:
      - 9090:9090
      - 8081:8080
      - 9095:9095
      - 16010:16010
      - 60000:60000
    volumes:
      - ./data/hbase-logs:/opt/hbase/logs
    depends_on:
      - zookeeper
      - hdfs-namenode
      - hdfs-datanode
      - hbase-region
    environment:
      - REGIONSERVERS=hbase-region
      - ZOOKEEPER=${ZOOKEEPER_HBASE}
      - HDFS_NAMENODE=hdfs-namenode
  hbase-region:
    image: oisp/hbase:${DOCKER_TAG}
    entrypoint: /opt/entrypoint-region.sh
    build:
      context: ./docker-hbase/
      dockerfile: Dockerfile
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_PLATFORM_LAUNCHER}
    volumes:
      - ./data/hbase-logs:/opt/hbase/logs
    depends_on:
      - zookeeper
      - hdfs-namenode
      - hdfs-datanode
    environment:
      - HBASE_MASTER=hbase-master
      - ZOOKEEPER=${ZOOKEEPER_HBASE}
      - HDFS_NAMENODE=hdfs-namenode
  postgres:
    image: oisp/postgres:${DOCKER_TAG}
    build:
      context: .
      dockerfile: docker-postgres/Dockerfile
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_PLATFORM_LAUNCHER}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB_REGULAR}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  kafka:
    image: oisp/kafka:${DOCKER_TAG}
    build:
      context: ./docker-kafka/
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_PLATFORM_LAUNCHER}
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      - ADVERTISED_HOST=${HOST_IP_ADDRESS}
      - ADVERTISED_PORT=${KAFKA_PORT}
      - AUTO_CREATE_TOPICS=true
      - ZK_CONNECT=${ZOOKEEPER_KAFKA}:${ZOOKEEPER_KAFKA_PORT}
  redis:
    image: redis:3.0
    volumes:
      - ./data/redis:/data
    ports:
      - 6379:6379
  gearpump:
    image: oisp/gearpump:${DOCKER_TAG}
    build:
      context: ./oisp-gearpump-rule-engine
      dockerfile: Dockerfile
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_GEARPUMP}
    depends_on:
      - nginx
      - hbase-master
      - kafka
      - frontend
    working_dir: /app
    environment:
      - VCAP_SERVICES=${VCAP_SERVICES}
      - VCAP_APPLICATION=${VCAP_APPLICATION}
      - KAFKA=${KAFKA}
      - KAFKA_HEARTBEAT_TOPIC=${KAFKA_HEARTBEAT_TOPIC}
      - GEARPUMP=${GEARPUMP}
    ports:
      - 8090:8090
    command: bash wait-for-it.sh kafka:9092 -t 300 -- bash bootstrap.sh
  nginx:
    image: oisp/nginx:${DOCKER_TAG}
    build:
      context: ./oisp-frontend/public-interface/nginx
      args:
        - WEBSOCKET_SERVER=websocket-server:5000
        - DASHBOARD_SERVER=frontend:4001
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_FRONTEND}
    ports:
      - 80:80
      - 443:443
    depends_on:
      - websocket-server
      - frontend
    volumes:
      - ./data/keys/ssl:/etc/ssl
  websocket-server:
    image: oisp/websocket-server:${DOCKER_TAG}
    build:
      context: ./oisp-websocket-server
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_WEBSOCKET_SERVER}
    ports:
      - 5000:5000
    depends_on:
      - postgres
      - kafka
    volumes:
      - ./data/keys:/app/keys
    working_dir: /app
    environment:
      - OISP_WEBSOCKET_SERVER_CONFIG=${OISP_WEBSOCKET_SERVER_CONFIG}
      - OISP_POSTGRES_CONFIG=${OISP_POSTGRES_CONFIG}
      - OISP_KAFKA_CONFIG=${OISP_KAFKA_CONFIG}
      - OISP_WEBSOCKETUSER_CONFIG=${OISP_WEBSOCKETUSER_CONFIG}
      - TEST=${TEST}
      - NODE_ENV=local
    command: ./wait-for-it.sh postgres:5432 -t 300 -- ./wait-for-it.sh kafka:9092 -t 300 -- ./scripts/docker-start.sh
  frontend:
    image: oisp/frontend:${DOCKER_TAG}
    build:
      context: ./oisp-frontend/public-interface
      labels:
        - oisp=true
        - ois.git_commit=${GIT_COMMIT_FRONTEND}
    ports:
      - 4001:4001
    depends_on:
      - postgres
      - redis
      - websocket-server
      - backend
      - kafka
    command: ./wait-for-it.sh postgres:5432 -t 300 -- ./wait-for-it.sh redis:6379 -t 300  -- ./wait-for-it.sh kafka:9092 -t 300 -- ./scripts/wait-for-heartbeat.sh backend websocket-server -- ./scripts/docker-start.sh ${RATE_LIMIT}
    volumes:
      - ./data/keys:/app/keys
    environment:
      - OISP_FRONTEND_CONFIG=${OISP_FRONTEND_CONFIG}
      - OISP_POSTGRES_CONFIG=${OISP_POSTGRES_CONFIG}
      - OISP_REDIS_CONFIG=${OISP_REDIS_CONFIG}
      - OISP_KAFKA_CONFIG=${OISP_KAFKA_CONFIG}
      - OISP_SMTP_CONFIG=${OISP_SMTP_CONFIG}
      - OISP_DASHBOARDSECURITY_CONFIG=${OISP_DASHBOARDSECURITY_CONFIG}
      - OISP_GATEWAY_CONFIG=${OISP_GATEWAY_CONFIG}
      - OISP_BACKENDHOST_CONFIG=${OISP_BACKENDHOST_CONFIG}
      - OISP_WEBSOCKETUSER_CONFIG=${OISP_WEBSOCKETUSER_CONFIG}
      - OISP_RULEENGINE_CONFIG=${OISP_RULEENGINE_CONFIG}
      - OISP_MAIL_CONFIG=${OISP_MAIL_CONFIG}
      - TEST=${TEST}
      - NODE_ENV=local
  backend:
    image: oisp/backend:${DOCKER_TAG}
    build:
      context: ./oisp-backend
      labels:
        - oisp=true
        - oisp.git_commit=${GIT_COMMIT_BACKEND}
    ports:
      - 8080:8080
    depends_on:
      - hbase-master
      - kafka
    command: ./wait-for-it.sh hbase-master:9090 -t 300 -- ./wait-for-it.sh kafka:9092 -t 300 -- make runjar
    working_dir: /app
    environment:
      - OISP_BACKEND_CONFIG=${OISP_BACKEND_CONFIG}
      - OISP_KAFKA_CONFIG=${OISP_KAFKA_CONFIG}
      - OISP_ZOOKEEPER_CONFIG=${OISP_ZOOKEEPER_CONFIG}
      - OISP_KERBEROS_CONFIG=${OISP_KERBEROS_CONFIG}
      - OISP_HBASE_CONFIG=${OISP_HBASE_CONFIG}
      - OISP_HADOOP_PROPERTIES=${OISP_HADOOP_PROPERTIES}
      - OISP_TSDB_PROPERTIES=${OISP_TSDB_PROPERTIES}
  hdfs-namenode:
    image: singularities/hadoop
    command: start-hadoop namenode
    volumes:
      - ./data/hdfs/name:/opt/hdfs
    hostname: hdfs-namenode
    environment:
      HDFS_USER: root
    ports:
      - "8020:8020"
      - "14000:14000"
      - "50070:50070"
      - "50075:50075"
      - "10020:10020"
      - "13562:13562"
      - "19888:19888"
  hdfs-datanode:
    image: singularities/hadoop
    command: start-hadoop datanode hdfs-namenode
    volumes:
      - ./data/hdfs/data:/opt/hdfs
    environment:
      HDFS_USER: root
    links:
      - hdfs-namenode
  zookeeper:
    image: zookeeper:3.4.13
    hostname: zookeeper
    volumes:
      - ./data/zookeeper:/data
      - ./data/zookeeper-logs:/datalog
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888
  jaeger:
    image: jaegertracing/all-in-one:1.8
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 9411:9411
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
  opentsdb:
    image: oisp/opentsdb:${DOCKER_TAG}
    build:
      context: ./docker-opentsdb
      labels:
        - oisp=true
        - ois.git_commit=${GIT_COMMIT_OPENTSDB}
    ports:
      - 4242:4242
    depends_on:
      - hbase-master
      - zookeeper
    command: /opt/wait-for-it.sh hbase-master:9090 -t 300 -- /opt/wait-for-it.sh zookeeper:2181 -t 300 -- /opt/tsdb-startup.sh
    environment:
      - OISP_ZOOKEEPER_CONFIG=${OISP_ZOOKEEPER_CONFIG}
      - OISP_OPENTSDB_CONFIG=${OISP_OPENTSDB_CONFIG}
      - OISP_HADOOP_PROPERTIES=${OISP_HADOOP_PROPERTIES}
      - OISP_TSDB_PROPERTIES=${OISP_TSDB_PROPERTIES}
