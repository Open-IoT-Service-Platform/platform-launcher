# Javascript Node CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    machine:
      enabled: true
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    environment:
      shell: /bin/bash
      TERM: xterm
      TZ: "Europe/Berlin"
  deployer:
    docker:
      - image: oisp/deployer
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    environment:
      shell: /bin/bash
      TERM: xterm

commands:
####################################
# NEW CI OVER SSH STARTS HERE      #
####################################
  e2e-over-ssh:
    description: "Say hello with ssh"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "ba:fc:ed:ea:ba:be:ce:75:a8:cf:11:bb:99:9d:d2:54"
      - run:
          shell: /bin/bash
          name: Clone Repository
          command: >-
            ssh arkocal@82.165.71.183 "echo Building all on external server &&
            echo ${CIRCLE_REPOSITORY_URL} &&
            mkdir /tmp/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM} &&
            cd /tmp/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM} &&
            git clone ${CIRCLE_REPOSITORY_URL} -b ${CIRCLE_BRANCH} &&
            cd /tmp/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM}/${CIRCLE_PROJECT_REPONAME}/ &&
            git submodule init &&
            git submodule update &&
            make update TERM=xterm"
      - run:
          shell: /bin/bash
          name: Wait for queue
          command: >-
            ssh arkocal@82.165.71.183 "echo \"Waiting for other tests to complete\" &&
            echo \"Delete /tmp/ci_test.lock manually if you are sure no other tests are running.\" &&
            while [[ -f /tmp/ci_test.lock ]]; do sleep 5; echo -n \".\"; done &&
            touch /tmp/ci_test.lock;"
      - run:
          shell: /bin/bash
          name: Build
          command: >-
            export TEST_ID=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM} &&
            ssh arkocal@82.165.71.183
            "(cd /tmp/${TEST_ID}/${CIRCLE_PROJECT_REPONAME} &&
            yes | make build DOCKER_TAG=test_${TEST_ID} DEBUG=true TERM=xterm) ||
            (rm /tmp/ci_test.lock && exit 1)"
      - run:
          shell: /bin/bash
          name: Test
# export DOCKERUSER=$DOCKERUSER passes the local variable to remote connection.
          command: >-
            export TEST_ID=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM} &&
            touch .can_delete_if_success &&
            ssh arkocal@82.165.71.183
            "cd /tmp/${TEST_ID}/${CIRCLE_PROJECT_REPONAME} &&
            (export NAMESPACE=${TEST_ID} && echo Namespace is: \${NAMESPACE} &&
            export NODOCKERLOGIN=true &&
            export KUBECONFIG=\$(k3d get-kubeconfig) &&
            sh util/deploy_operators.sh &&
            make import-images-to-local-registry DOCKER_TAG=test_${TEST_ID} DEBUG=true &&
            (make undeploy-oisp || true) &&
            make deploy-oisp-test DOCKER_TAG=test_${TEST_ID} HELM_ARGS=\"--set use_local_registry=true
            --set keycloak.keycloak.image.repository=registry.local:5000/oisp/keycloak
            --set keycloak.keycloak.image.tag=test_${TEST_ID}\" &&
            make DOCKER_TAG=test_${TEST_ID} test) || rm .can_delete_if_success"         &&
            ssh arkocal@82.165.71.183
            "cd /tmp/${TEST_ID}/${CIRCLE_PROJECT_REPONAME} &&
            export KUBECONFIG=\$(k3d get-kubeconfig) &&
            export NAMESPACE=${TEST_ID} &&
            make undeploy-oisp &&
            (rm /tmp/ci_test.lock || true)" &&
            rm .can_delete_if_success

################################################################################
# NEW CI OVER SSH ENDS HERE                                                    #
# TODO: refactoring, once the migration is done, each step should be a cmd     #
################################################################################
  setup-build-environment:
    description: "Setup build Environment"
    steps:
      - run:
          shell: /bin/bash
          name: Setup build environment
          command: |
            cd util && \
            bash setup-ubuntu18.04.sh
            # create 8GB swap
            sudo dd if=/dev/zero of=/swapfile bs=1M count=8000
            sudo mkswap /swapfile
            sudo swapon /swapfile
  setup-branch:
    description: "Setup subbranches"
    steps:
      - run:
          shell: /bin/bash
          name: Setup sub branches
          command: |
            sudo apt install jq
            # First find out Base Branch (if any)
            if [ ! -z "${CIRCLE_PULL_REQUEST}" ]; then
              PR=${CIRCLE_PR_NUMBER}
              PR_REPO=${CIRCLE_PR_REPONAME}
              PROJECT_USERNAME=${CIRCLE_PROJECT_USERNAME}
              url="https://api.github.com/repos/${PROJECT_USERNAME}/${PR_REPO}/pulls/${PR}"
              BASE_BRANCH=$(curl "$url" | jq '.base.ref' | tr -d '"')
              echo Detected Pull Request with Base Branch ${BASE_BRANCH}
            fi
            git submodule init
            git submodule update
            if [ "$CIRCLE_BRANCH" = "develop" ] || [ "${BASE_BRANCH}" = "develop" ] || [ ! -z "${CIRCLE_TAG}" ]; then
              #If on develop or a PR towards develop assume that all submodules are updated
              echo Detected that PR is related to develop or a TAG. Will update all subrepos.
              make update
            fi
  e2e-linter:
    description: "Run linting on E2E tests"
    steps:
      - run:
          name: Lint E2E tests
          shel: /bin/bash
          command: |
            cd tests
            source ~/.profile
            nvm use 10
            sudo chown circleci -R /home/circleci/.npm
            sudo chmod 755 -R /home/circleci/.npm
            npm install
            node_modules/grunt-cli/bin/grunt validate
  build-branch:
    description: "Build branch"
    steps:
      - run:
          shell: /bin/bash
          name: Build branch
          # DEBUG=true, because on k8s the tests run inside the debug contianer
          command: |
            yes| make build DOCKER_TAG="test" DEBUG=true
  e2e-test:
    description: "E2E test"
    steps:
      - run:
          shell: /bin/bash
          name: E2e Test
          command: |
            export PATH=$PATH:/snap/bin
            make import-images DOCKER_TAG=test DEBUG=true
            docker create -it --name re-tmp oisp/rule-engine:test /bin/sh
            docker cp re-tmp:/rule-engine-bundled-0.1.jar .
            npm install nodemailer
            export NODOCKERLOGIN=true
            retval=2;
            until [ ${retval} -eq 0 ]; do
              make undeploy-oisp
              make deploy-oisp-test DOCKER_TAG=test
              make test
              retval=$?
            done
          no_output_timeout: 20m
  push-jar-over-ftp:
    description: "Push rule engine to FTP server"
    steps:
      - run:
          shell: /bin/bash
          name: Push jar to ftp server
          command: |
            HOST='82.165.114.145'
            USER='ftp'
            PASSWD=${FTPPASS}
            ftp -n -v $HOST \<< EOT
            user $USER $PASSWD
            prompt
            pass
            cd files
            put rule-engine-bundled-0.1.jar
            bye
            EOT
  push-images:
    description: "Push images"
    parameters:
      tag:
        type: string
        default: "latest"
    steps:
      - run:
          shell: /bin/bash
          name: Push images to docker hub
          command: |
            # login based on preconfigured env variables
            docker login  -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}

            # Tag passed "test" images as "latest"
            images=$(docker images --format "{{.Repository}}:{{.Tag}}"| grep :test)
            for image in $images; do
              newimage=$(echo $image | sed -r "s/:test/:latest/g");
              docker tag $image $newimage;
            done
            #Start with latest tag, replace later by the real-tags
            DOCKER_TAG="latest"
            if [ "<< parameters.tag >>" = "date" ]; then
              # Should be nightly build
              TARGET_DOCKER_TAG=nightly-`date -I`
              DOCKER_PUSH_LATEST=true
            fi
            if [ "<< parameters.tag >>" = "tag" ]; then
              # Should be master build
              TARGET_DOCKER_TAG=`git describe --tags --exact-match` || exit 1
            fi
            # First push latest if applicable and then the real tag
            echo Now trying to push with Tag ${DOCKER_TAG} push latest ${DOCKER_PUSH_LATEST}
            if [ "$DOCKER_PUSH_LATEST" = "true" ]; then
              echo Pushing images with latest tag
              if [ -z "$PUSH_DRYRUN" ]; then
                make push-images
              else
                echo Only dry run mode. Not pushing to dockerhub!
              fi
            fi
            # Now replace all latest tagged images by the real tag
            echo Now pushing images with tag $DOCKER_TAG
            images=$(docker images --format "{{.Repository}}:{{.Tag}}"| grep :latest | grep oisp)
            for image in $images; do
              newimage=$(echo $image | sed -r "s/:latest/:$TARGET_DOCKER_TAG/g");
              echo tagging $image to $newimage;
              docker tag $image $newimage
              if [ -z "$PUSH_DRYRUN" ]; then
                docker push ${newimage}
              else
                echo Only dry run mode. Not pushing to dockerhub!
              fi
            done

  check-signed:
    description: "Check whether latest commit is signed"
    steps:
      - run:
          name: Check whether most recent commit is signed
          shell: /bin/bash
          command: |
            MESSAGE=`git log -1 --pretty=%B`
            echo "Checking whether signed"
            if [[ "${MESSAGE}" == *Signed-off-by:*@* ]]; then
              echo "Commit is signedoff"
            else
              echo "Commit is not signedoff"
              exit 1
            fi
  check-tagged:
    description: "Check whether latest commit is tagged"
    steps:
      - run:
          name: Check whether most recent commit is tagged
          shell: /bin/bash
          command: |
            git describe --tags --exact-match || exit 1
  deploy:
    description: "Deploy OISP to a production cluster."
    steps:
      - run:
          name: Run deploy script
          shell: /bin/bash
          command: |
            export HELM_ARGS="--force \
              --atomic \
              --set less_resources=\"false\" --set production=\"true\" \
              --set certmanager.secret=\"frontend-web-prod-tls\" \
              --set certmanager.issuer=\"letsencrypt-prod\" \
              --set numberReplicas.frontend=2 \
              --set numberReplicas.backend=3"
            cd ~ && sh deploy.sh

jobs:
  build:
    executor: my-executor
    steps:
      - e2e-over-ssh
  build-pr:
    executor: my-executor
    steps:
      - checkout
      - check-signed
      - setup-build-environment
      - setup-branch
      - e2e-linter
      - build-branch
      - e2e-test
  build-tagged:
    executor: my-executor
    steps:
      - checkout
      - setup-build-environment
      - setup-branch
      - e2e-linter
      - build-branch
      - e2e-test
      - push-images:
          tag: "tag"
  build-nightly:
    executor: my-executor
    steps:
      - checkout
      - setup-build-environment
      - setup-branch
      - e2e-linter
      - build-branch
      - e2e-test
      - push-images:
          tag: "date"
      - push-jar-over-ftp
  deploy-production:
    executor: deployer
    steps:
      - deploy


workflows:
  version: 2.1
  workflow:
    jobs:
      - build-pr:
          filters:
            branches:
              ignore:
                - develop
                - master
                - ci-feature
      - build:
          filters:
            branches:
              only:
                - develop
                - ci-feature
      - build-tagged:
          filters:
            branches:
              only:
                - develop
            tags:
              only: /^v.*/
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-nightly:
          filters:
            branches:
              only:
                - develop
      - deploy-production:
          requires:
            - build-nightly
