# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
  my-executor:
    machine:
      enabled: true
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    environment:
      shell: /bin/bash
      TERM: xterm
      TZ: "Europe/Berlin"
commands:
  setup-build-environment:
    description: "Setup build Environment"
    steps:
      - run:
          shell: /bin/bash
          name: Setup build environment
          command: |
            cd platform-setup
            sudo ./setup-ubuntu16.04.sh
  setup-branch:
    description: "Setup subbranches"
    steps:
      - run:
          shell: /bin/bash
          name: Setup sub branches
          command: |
            sudo apt install jq
            # First find out Base Branch (if any)
            if [ ! -z "${CIRCLE_PULL_REQUEST}" ]; then
              PR=${CIRCLE_PR_NUMBER}
              PR_REPO=${CIRCLE_PR_REPONAME}
              PROJECT_USERNAME=${CIRCLE_PROJECT_USERNAME}
              url="https://api.github.com/repos/${PROJECT_USERNAME}/${PR_REPO}/pulls/${PR}"
              BASE_BRANCH=$(curl "$url" | jq '.base.ref' | tr -d '"')
              echo Detected Pull Request with Base Branch ${BASE_BRANCH}
            fi
            git submodule init
            git submodule update
            if [ "$CIRCLE_BRANCH" = "develop" ] || [ "${BASE_BRANCH}" = "develop" ]; then
              #If on develop or a PR towards develop assume that all submodules are updated
              echo Detected that PR is related to develop. Will update all subrepos.
              make update
            fi
  build-branch:
    description: "Build branch"
    steps:
      - run:
          shell: /bin/bash
          name: Build branch
          command: |
            yes| make build
  e2e-test:
    description: "E2E test"
    steps:
      - run:
          shell: /bin/bash
          name: E2e Test
          command: |
            yes| make test
  push-images:
    description: "Push images"
    parameters:
      tag:
        type: string
        default: "latest"
    steps:
      - run:
          shell: /bin/bash
          name: Push images to docker hub
          command: |
            docker login  -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            DOCKER_TAG="latest"
            if [ "<< parameters.tag >>" = "date" ]; then
              DOCKER_TAG=`date -I`
              DOCKER_PUSH_LATEST=true
            fi
            if [ "<< parameters.tag >>" = "tag" ]; then
              DOCKER_TAG=`git describe --tags --exact-match` || exit 1
            fi
            echo Now trying to push with Tag ${DOCKER_TAG} push latest ${DOCKER_PUSH_LATEST}
            if [ ! -z "$PUSH_DRYRUN" ]; then
              make push-images
              if [ ! -z "$DOCKER_PUSH_LATEST" ]; then
                DOCKER_TAG="latest" make push-images
              fi
            else
              echo Only dry run mode. Not pushing to dockerhub!
            fi
  check-signed:
    description: "Check whether latest commit is signed"
    steps:
      - run:
          name: Check whether most recent commit is signed
          shell: /bin/bash
          command: |
            MESSAGE=`git log -1 --pretty=%B`
            echo "Checking whether signed"
            if [[ "${MESSAGE}" == *Signed-off-by:*@* ]]; then
              echo "Commit is signedoff"
            else
              echo "Commit is not signedoff"
              exit 1
            fi
  check-tagged:
    description: "Check whether latest commit is tagged"
    steps:
      - run:
          name: Check whether most recent commit is tagged
          shell: /bin/bash
          command: |
            git describe --tags --exact-match || exit 1
jobs:
  build:
    executor: my-executor
    steps:
      - checkout
      - check-signed
      - setup-build-environment
      - setup-branch
      - build-branch
      - e2e-test
  build-master:
    executor: my-executor
    steps:
      - checkout
      - check-tagged
      - setup-build-environment
      - setup-branch
      - build-branch
      - e2e-test
      - push-images:
          tag: "tag"
  build-nightly:
    executor: my-executor
    steps:
      - checkout
      - setup-build-environment
      - setup-branch
      - build-branch
      - e2e-test
      - push-images:
          tag: "date"
workflows:
  version: 2.1
  workflow:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
      - build-master:
          filters:
            branches:
              only:
                - master
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-nightly:
          filters:
            branches:
              only:
                - develop
