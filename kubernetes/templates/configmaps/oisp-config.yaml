apiVersion: v1
data:
  {{ $secret := (lookup "v1" "Secret" "iff" "keycloak-client-secret-oisp-frontend") }}
  frontend: |
    {
    "postgresConfig": "@@OISP_POSTGRES_CONFIG",
    "redisConfig": "@@OISP_REDIS_CONFIG",
    "kafkaConfig": "@@OISP_KAFKA_CONFIG",
    "smtpConfig": "@@OISP_SMTP_CONFIG",
    "frontendSecurityConfig": "@@OISP_FRONTENDSECURITY_CONFIG",
    "backendHostConfig": "@@OISP_BACKENDHOST_CONFIG",
    "mailConfig": "@@OISP_MAIL_CONFIG",
    "gatewayConfig": "@@OISP_GATEWAY_CONFIG",
    "jaegerTracing": {{ .Values.jaeger_tracing }},
    "grafanaConfig": "@@OISP_GRAFANA_CONFIG",
    "keycloakConfig": "@@OISP_KEYCLOAK_CONFIG",
    "keycloakClientSecret": "{{ $secret.data.CLIENT_SECRET | b64dec }}"
    }
  backend: |
    {
    "tsdbName": {{ .Values.backend.defaultTsdbBackend | quote }},
    "objectStoreName": {{ .Values.backend.objectStoreName | quote }},
    "kafkaConfig": "@@OISP_KAFKA_CONFIG",
    "tsdbProperties": "%%OISP_TSDB_PROPERTIES",
    "zookeeperConfig": "@@OISP_ZOOKEEPER_CONFIG",
    "jaegerConfig": "@@OISP_BACKEND_JAEGER_CONFIG",
    "objectStoreProperties": "%%OISP_OBJECT_STORE_MINIO_PROPERTIES"
    }
  backend-jaeger: |
    {
    "serviceName": "backend",
    "agentHost": "localhost",
    "agentPort": 6831,
    "logSpans": true,
    "samplerType": "probabilistic",
    "samplerParam": 0.1,
    "tracing": {{ .Values.jaeger_tracing }}
    }
  kafka: |
    {
    {{- $kafka := .Values.kafka -}}
    {{- with $kafka }}
    "uri": "{{ .service }}",
    "partitions": 1,
    "metricsPartitions": {{ .metricsPartitions }},
    "replication": {{ .replicationFactor }},
    "timeoutMs": 10000,
    "topicsObservations": {{ .metricsTopic | quote }},
    "topicsRuleEngine": "rules-update",
    "topicsActuations": "actuations",
    "topicsHeartbeatName": "heartbeat",
    "topicsHeartbeatInterval": 5000,
    "maxPayloadSize": {{ .maxPayloadSize | int }},
    "retries": {{ .retries }},
    "requestTimeout": {{ .requestTimeout }},
    "maxRetryTime": {{ .maxRetryTime }}
    {{- end }}
    }
  zookeeper: |
    {
    "zkCluster": {{ .Values.zookeeper.servers | quote }}
    }
  kerberos: |
    {
    "kdc": "localhost",
    "kpassword": "pass",
    "krealm": "realm",
    "kuser": "user"
    }
  hbase: |
    {
    "hadoopProperties": "%%OISP_HADOOP_PROPERTIES"
    }
  hadoop: |
    {
    "hadoop.security.authentication": "simple",
    "hadoop.security.authorization": "false",
    "hbase.security.authentication": "simple",
    "ha.zookeeper.quorum": {{ .Values.zookeeper.servers | quote }},
    "hbase.zookeeper.property.clientPort": "2181",
    "hbase.zookeeper.quorum": {{ .Values.zookeeper.servers | quote }},
    "hbase.rootdir": "/hbase"
    }
  postgres: |
    {
    "dbname": "oisp",
    "hostname": "acid-oisp-repl",
    "writeHostname": "acid-oisp",
    "port": "5432",
    "su_username": "{{ .Values.stolon.pgSuperuserName }}",
    "su_password": "{{ .Values.stolon.pgSuperuserPassword }}",
    "username": "{{ .Values.postgres.username }}",
    "password": "{{ .Values.postgres.password }}"
    }
  redis: |
    {
    "hostname": "redis",
    "port": "6379",
    "password": ""
    }
  smtp: |
    {
    "host": "{{ .Values.smtp.host }}",
    "port": "{{ .Values.smtp.port }}",
    "protocol": "smtp",
    "username": "{{ .Values.smtp.username }}",
    "password": "{{ .Values.smtp.password }}"
    }
  frontend-security: |
    {
    "interaction_token_permision_key": "password",
    "private_pem_path": "./keys/private.pem",
    "public_pem_path": "./keys/public.pem"
    }
  {{ $secret := (lookup "v1" "Secret" "iff" "keycloak-client-secret-oisp-frontend") }}
  keycloak: |
    {
    "listenerPort": "4004",
    "realm": "iff",
    {{ if .Values.less_resources }}
    "auth-server-url": "http://keycloak.local/auth",
    {{ else }}
    "auth-server-url": "https://keycloak.local/auth",
    {{ end }}
    "resource": "{{ $secret.data.CLIENT_ID | b64dec }}",
    "secret": "{{ $secret.data.CLIENT_SECRET | b64dec }}",
    "mqtt-broker-id": "mqtt-broker",
    "ssl-required": "external"
    }
  {{ $secret := (lookup "v1" "Secret" "iff" "keycloak-initial-admin") }}
  keycloak-admin: |
    {
    "username": "{{ $secret.data.username | b64dec }}",
    "password": "{{ $secret.data.password | b64dec }}"
    }
  {{ $secret := (lookup "v1" "Secret" "iff" "keycloak-client-secret-oisp-frontend") }}
  keycloak-frontend-secret: "{{ $secret.data.CLIENT_SECRET | b64dec }}"
  {{ $secret := (lookup "v1" "Secret" "iff" "keycloak-client-secret-mqtt-broker") }}
  keycloak-mqtt-broker-secret: "{{ $secret.data.CLIENT_SECRET | b64dec }}"
  gateway: |
    {
    "username": "{{ .Values.systemuser.username }}",
    "password": "{{ .Values.systemuser.password }}"
    }
  backend-host: |
    {
    "deviceMeasurementTableName": "LOCAL-AA-BACKEND_DEVICE_MEASUREMENT",
    "host": "http://backend:8080"
    }
  mail: |
    {
    "sender": "test.sender@streammyiot.com"
    }
  opentsdb-config: |
    {
    "port": 4242
    }
  kairosdb-properties: |
    {
    "uri": {{ .Values.backend.tsdbUri | quote }},
    "port": {{ .Values.backend.tsdbPort | quote }},
    "cassandraHost": "{{ .Values.cassandra.cluster}}-{{ .Values.cassandra.name}}-service.cassandra.svc.cluster.local",
    "cassandraPort": {{ .Values.cassandra.port | quote}},
    "cassandraReplication": {{ .Values.cassandra.replication | quote}}
    }
  {{ $secret := (lookup "v1" "Secret" "iff" "minio-user") }}
  minio: |
    {
    "endPoint": "minio.iff.svc.cluster.local",
    "port": "80",
    "useSSL": "false",
    "accessKey": "{{ $secret.data.CONSOLE_ACCESS_KEY | b64dec }}",
    "secretKey": "{{ $secret.data.CONSOLE_SECRET_KEY | b64dec }}"
    }
  grafana: |
    {
    "port": "3000",
    "adminUser": "{{ .Values.grafana.admin }}",
    "adminPassword": "{{ .Values.grafana.password }}",
    "dataSource": "kairosdb",
    "dataSourceHost": "kairosdb",
    "dataSourcePort": "8080"
    }
  {{ $secret := (lookup "v1" "Secret" "iff" "keycloak-client-secret-mqtt-broker") }}
  mqtt-gateway: |
    {
    "mqttBrokerUrl": "{{ .Values.mqtt.broker.url }}",
    "mqttBrokerLocalPort": "{{ .Values.mqtt.broker.localport }}",
    "mqttBrokerUsername": "{{ .Values.mqtt.broker.username }}",
    "mqttBrokerPassword": "{{ .Values.mqtt.broker.password }}",
    "authServicePort": "{{ .Values.mqtt.gateway.port }}",
    "redisConf": "@@OISP_REDIS_CONFIG",
    "kafkaConfig": "@@OISP_KAFKA_CONFIG",
    "postgresConfig": "@@OISP_POSTGRES_CONFIG",
    "keycloakConfig": "@@OISP_KEYCLOAK_CONFIG",
    "keycloakClientSecret": "{{ $secret.data.CLIENT_SECRET | b64dec }}"
    }


kind: ConfigMap
metadata:
  creationTimestamp: null
  name: oisp-config
  selfLink: /api/v1/namespaces/cloudfest-1/configmaps/oisp-config
