# Credentials to pull images from docker registry
imageCredentials:
    registry: docker.io
    username: invalid_username
    password: invalid_password

smtp:
    host: debugger
    port: 2525
    username: username
    password: password

imap:
    host: imap.ethereal.email
    port: 993
    username: imaptest@streammyiot.com
    password: P@ssword123!

numberReplicas:
    frontend: 1
    backend: 1
    debugger: 0
    minio: 4

minio:
  httpurl: http://minio:9000
  endpoint: minio:9000
  accesskey: minio
  secretkey: minio123
  mcimage: minio/mc:latest

backup:
  bucket: backup

certmanager:
  secret: selfsigned-cert-tls
  issuer: letsencrypt-self

emqx:
  replicaCount: 3
  fullnameOverride: emqx
  emqxConfig:
    EMQX_AUTH__HTTP__ACL_REQ: http://mqtt-gateway:3025/acl
    EMQX_AUTH__HTTP__ACL_REQ__METHOD: get
    EMQX_AUTH__HTTP__ACL_REQ__PARAMS: access=%A,username=%u,topic=%t
    EMQX_AUTH__HTTP__AUTH_REQ: http://mqtt-gateway:3025/auth
    EMQX_AUTH__HTTP__AUTH_REQ__METHOD: get
    EMQX_AUTH__HTTP__AUTH_REQ__PARAMS: username=%u,password=%P
    EMQX_CLUSTER__K8S__ADDRESS_TYPE: hostname
    EMQX_CLUSTER__K8S__APISERVER: https://kubernetes.default.svc:443
    EMQX_CLUSTER__K8S__SUFFIX: svc.cluster.local
    EMQX_LOADED_PLUGINS: emqx_auth_http
    EMQX_LOG__LEVEL: warning
    EMQX_LISTENER__SSL__EXTERNAL__CERTFILE: etc/certs/server.cert
    EMQX_LISTENER__SSL__EXTERNAL__KEYFILE: etc/certs/server.key
    EMQX_LISTENER__SSL__EXTERNAL__VERIFY: verify_none

emqxtest:
  replicaCount: 1
  fullnameOverride: emqx
  emqxConfig:
    EMQX_AUTH__HTTP__ACL_REQ: http://mqtt-gateway:3025/acl
    EMQX_AUTH__HTTP__ACL_REQ__METHOD: get
    EMQX_AUTH__HTTP__ACL_REQ__PARAMS: access=%A,username=%u,topic=%t
    EMQX_AUTH__HTTP__AUTH_REQ: http://mqtt-gateway:3025/auth
    EMQX_AUTH__HTTP__AUTH_REQ__METHOD: get
    EMQX_AUTH__HTTP__AUTH_REQ__PARAMS: username=%u,password=%P
    EMQX_CLUSTER__K8S__ADDRESS_TYPE: hostname
    EMQX_CLUSTER__K8S__APISERVER: https://kubernetes.default.svc:443
    EMQX_CLUSTER__K8S__SUFFIX: svc.cluster.local
    EMQX_LOADED_PLUGINS: emqx_auth_http
    EMQX_LOG__LEVEL: warning
    EMQX_LISTENER__SSL__EXTERNAL__CERTFILE: etc/certs/server.cert
    EMQX_LISTENER__SSL__EXTERNAL__KEYFILE: etc/certs/server.key
    EMQX_LISTENER__SSL__EXTERNAL__VERIFY: verify_none


kafka:
  fullnameOverride: oisp-kafka
  service: oisp-kafka-headless:9092
  fullBrokerList: "oisp-kafka-headless:9092"
  replicas: 3
  metricsPartitions: 2
  metricsTopic: "metrics"
  replicationFactor: 2
  requestTimeout: 20000
  maxRetryTime: 2000
  retries: 5
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
  configurationOverrides:
    auto.create.topics.enable: true
    offsets.topic.replication.factor: 3
    replica.fetch.max.bytes: "20000000"
    message.max.bytes: "20000000"
    default.replication.factor: 2
    log.retention.ms: "86400000"
  zookeeper:
    replicaCount: 3
    resources:
      requests:
        cpu: 200m
        memory: 100M
  envOverrides:
    JMX_PORT: 9999

kafkatest:
  fullnameOverride: oisp-kafka
  service: oisp-kafka-headless:9092
  fullBrokerList: "oisp-kafka-headless:9092"
  replicas: 1
  metricsPartitions: 1
  metricsTopic: "metrics"
  replicationFactor: 1
  requestTimeout: 20000
  maxRetryTime: 5000
  retries: 10
  resources:
    requests:
      cpu: 50m
      memory: 500M
  configurationOverrides:
    auto.create.topics.enable: true
    offsets.topic.replication.factor: 1
    replica.fetch.max.bytes: "20000000"
    message.max.bytes: "20000000"
    log.retention.ms: "86400000"
  zookeeper:
    replicaCount: 1
    resources:
      requests:
        cpu: 50m
        memory: 50M
  envOverrides:
    JMX_PORT: 9999

zookeeper:
  namespace: zookeeper
  name: zookeeper
  servers: "oisp-zookeeper-headless"
  readyCheck: "oisp-zookeeper-headless:2181"

backend:
  defaultTsdbBackend: "kairosDB"
  objectStoreName: "minio"
  tsdbUri: "kairosdb"
  tsdbPort: 8080

# This used to have a host field, which had to be removed from values.yaml
# If you change cluster, you also have to update the wait-for-it in kairos-db.yaml
# and in oisp-config.yaml
cassandra:
  cluster: "oisp"
  port: 9042
  replication: "{'class': 'SimpleStrategy','replication_factor' : 2}"
  nodes: 3
  disk: 100Gi
  memory: 1Gi

grafana:
  admin: grafana
  password: intel123

mqtt:
  broker:
    username: username
    password: password
    url: emqx
    localport: 1883
  gateway:
    port: 3025
    url: mqtt-gateway
  certs:
    cafile: "server.cert"
    keyfile: "server.key"
    certfile: "server.cert"
    rootpath: "/opt/emqx/etc/certs"

# Gearpump username and password are legacy, they can be removed safely
# after the rule-engine is updated to ignore them.
ruleEngine:
  username: "rule_engine@intel.com"
  password: password
  url: "http://services-server/rule-engine-bundled-0.1.1.jar"
  checkpointingInterval : "10000"

metricsAggregator:
  metricsTopic: "metrics"
  url: "http://services-server/metrics-aggregator-bundled-0.1.1.jar"
  checkpointingInterval : "10000"

websocketServer:
  username: api_actuator
  password: password

# Hosts used for Ingress configuration
hosts:
    frontend: latest.oisp.info
    websocketserver: ws.latest.oisp.info
    mqttserver: mqtt.latest.oisp.info
    streamer: streamer.latest.oisp.info

systemuser:
  username: gateway@intel.com
  password: 7d501829lhbl1or0bb1784462c97bcad6

stolon:
  pgSuperuserName: superuser
  pgSuperuserPassword: supersecret

# db values must be same with the postgres config, see stolon values
keycloak:
  init:
    resources:
      requests:
        cpu: "50m"
  fullnameOverride: "keycloak"
  nameOverride: "keycloak"
  keycloak:
    image:
      repository: oisp/keycloak
      pullSecrets:
      - dockercred
      tag: latest
    basepath: keycloak
    extraArgs: "-Dkeycloak.profile.feature.token_exchange=enabled -Dkeycloak.profile.feature.admin_fine_grained_authz=enabled -Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.import=/opt/jboss/keycloak/realms/oisp-realm.json"
    extraEnv: |
      - name: PROXY_ADDRESS_FORWARDING
        value: "true"
      - name: OISP_FRONTEND_DEVICE_ACCOUNT_ENDPOINT
        value: "http://frontend:4004/keycloak/activationcode/:activationCode/devices/:deviceUID/account"
      - name: OISP_FRONTEND_USER_ACCOUNT_ENDPOINT
        value: "http://frontend:4004/keycloak/users/:userId/accounts"
      - name: OISP_FRONTEND_USER_DELETE_ENDPOINT
        value: "http://frontend:4004/keycloak/users/:userId"
      - name: OISP_FRONTEND_SECRET
        valueFrom:
          configMapKeyRef:
            name: oisp-config
            key: keycloak-frontend-secret
      - name: OISP_WEBSOCKET_SERVER_SECRET
        valueFrom:
          configMapKeyRef:
            name: oisp-config
            key: keycloak-websocket-server-secret
      - name: FUSION_BACKEND_SECRET
        valueFrom:
          configMapKeyRef:
            name: fusion-config
            key: keycloak-fusion-backend-secret
    resources:
      requests:
        cpu: "50m"
    startupScripts:
      startup.sh: |
        #!/bin/sh
        sh /opt/jboss/keycloak/realms/prepare-realm.sh
    extraVolumes: |
      - name: jwt-keys
        secret:
          secretName: oisp-secrets
          items:
          - key: jwt.x509
            path: x509.pem
          - key: jwt.privatekey
            path: private.pem
          defaultMode: 420
    extraVolumeMounts: |
      - name: jwt-keys
        mountPath: "/keys"
        readOnly: true
    service:
      httpPort: 4080
      httpsPort: 4043
      host: keycloak-http
    username: keycloak
    password: intel123
    persistence:
      deployPostgres: false
      dbVendor: postgres
      dbName: oisp
      dbHost: postgres
      dbPort: "5432"
      dbUser: superuser
      dbPassword: supersecret
  frontend:
    secret: "supersecret"
  websocketServer:
    secret: "supersecret"
    id: "websocket-server"
  fusionBackend:
    secret: "supersecret"
  # Change root address of authServerUrl to the URL of oisp-frontend
  # if any application that needs access to keycloak is deployed to another namespace
  # Example: URL of Frontend - https://latest.oisp.info:443
  #          Auth Server URL for Applications in Other Namespaces: https://latest.oisp.info:443/keycloak
  authServerUrl: "http://keycloak-http:4080/keycloak"

jwt:
  public: "No key set"
  private: "No key set"
  x509: "No cert set"

postgres:
  username: oisp_user
  password: supersecret

# Docker image tag
tag: latest
use_local_registry: false

# Enable jaeger tracing
jaeger_tracing: false

# Sets resource limits lower to test locally
# or on smaller cluster when set to true
# Note: make sure that less_resources and production always containe inverted Values
# why: Because selection of subcharts in Helm does not work with "false" values (sad, but true)
less_resources: true
production: false

flink:
  restPort: 8081
  restUrl: flink-jobmanager-rest
  url: flink-jobmanager
  resources:
    jobmanager:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    taskmanager:
      replicas: 3
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  checkpoints:
    bucket: flink-checkpoints
    endpoint: state