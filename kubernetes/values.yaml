# Credentials to pull images from docker registry
imageCredentials:
    registry: index.docker.io
    username: invalid_username
    password: invalid_password

smtp:
    host: debugger
    port: 2525
    username: username
    password: password

imap:
    host: imap.ethereal.email
    port: 993
    username: imaptest@streammyiot.com
    password: P@ssword123!

numberReplicas:
    frontend: 1
    backend: 1
    debugger: 0
    minio: 4

minio:
  accesskey: minio
  secretkey: minio123

kafka:
  maxPayloadSize: 20000000
  service: kafka-all-broker.kafka.svc.cluster.local:29092
  namespace: kafka

zookeeper:
  replicas: 3
  namespace: zookeeper
  name: zookeeper
  servers: "zookeeper-client.zookeeper.svc.cluster.local"
  readyCheck: "zookeeper-client.zookeeper.svc.cluster.local:2181"

backend:
  defaultTsdbBackend: "kairosDB"
  objectStoreName: "minio"
  tsdbUri: "kairosdb"
  tsdbPort: 8080

cassandra:
  host: cassandra-oisp-nodes.cassandra.svc.cluster.local
  port: 9042
  replication: "{'class': 'SimpleStrategy','replication_factor' : 2}"
  nodes: 3
  disk: 10Gi
  memory: 1Gi

grafana:
  admin: grafana
  password: intel123

mqtt:
  broker:
    username: username
    password: password

# Gearpump username and password are legacy, they can be removed safely
# after the rule-engine is updated to ignore them.
ruleEngine:
  username: "rule_engine@intel.com"
  password: password
  gearpump:
    username: admin
    password: password

websocketServer:
  username: api_actuator
  password: password

# Hosts used for Ingress configuration
hosts:
    frontend: latest.oisp.info
    websocketserver: ws.latest.oisp.info
    mqttserver: mqtt.latest.oisp.info

systemuser:
  username: gateway@intel.com
  password: 7d501829lhbl1or0bb1784462c97bcad6

stolon:
  pgSuperuserName: superuser
  pgSuperuserPassword: supersecret

# db values must be same with the postgres config, see stolon values
keycloak:
  init:
    resources:
      requests:
        cpu: "50m"
  fullnameOverride: "keycloak"
  nameOverride: "keycloak"
  keycloak:
    image:
      repository: jboss/keycloak
      tag: 8.0.1
    basepath: keycloak
    extraArgs: "-Dkeycloak.profile.feature.token_exchange=enabled -Dkeycloak.profile.feature.admin_fine_grained_authz=enabled -Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.import=/opt/jboss/realms/oisp-realm.json"
    extraEnv: |
      - name: PROXY_ADDRESS_FORWARDING
        value: "true"
      - name: OISP_FRONTEND_DEVICE_ACCOUNT_ENDPOINT
        value: "http://frontend:4004/keycloak/activationcode/:activationCode/devices/:deviceUID/account"
      - name: OISP_FRONTEND_USER_ACCOUNT_ENDPOINT
        value: "http://frontend:4004/keycloak/users/:userId/accounts"
      - name: OISP_FRONTEND_SECRET
        valueFrom:
          configMapKeyRef:
            name: oisp-config
            key: keycloak-frontend-secret
    resources:
      requests:
        cpu: "50m"
    startupScripts:
      startup.sh: |
        #!/bin/sh
        echo "Database address is set to: $DB_ADDR"
        echo "OISP Frontend User Account Endpoint is set to: $OISP_FRONTEND_USER_ACCOUNT_ENDPOINT"
        echo "OISP Frontend Device Account Endpoint is set to: $OISP_FRONTEND_DEVICE_ACCOUNT_ENDPOINT"
        REALM_DIR="/opt/jboss/realms/oisp-realm.json"
        PRIVATE_KEY=$(cat /keys/private.pem)
        PRIVATE_KEY=${PRIVATE_KEY//$'\n'/\\\\n}
        PRIVATE_KEY=${PRIVATE_KEY//\//\\\/}
        PUBLIC_CERT=$(cat /keys/x509.pem)
        PUBLIC_CERT=${PUBLIC_CERT//$'\n'/\\\\n}
        PUBLIC_CERT=${PUBLIC_CERT//\//\\\/}
        mkdir /opt/jboss/realms
        cp /realms/oisp-realm.json /opt/jboss/realms/oisp-realm.json
        sed -i "s/{{ INSERT-PRIVATE-KEY }}/${PRIVATE_KEY}/" ${REALM_DIR}
        sed -i "s/{{ INSERT-PUBLIC-CERT }}/${PUBLIC_CERT}/" ${REALM_DIR}
        # OISP_FRONTEND_SECRET is already defined in the environment variables
        sed -i "s/{{ INSERT-OISP-FRONTEND-SECRET }}/${OISP_FRONTEND_SECRET}/" ${REALM_DIR}
    extraVolumes: |
      - name: oisp-realm-secret
        secret:
          secretName: oisp-realm-secret
      - name: jwt-keys
        secret:
          secretName: oisp-secrets
          items:
          - key: jwt.x509
            path: x509.pem
          - key: jwt.privatekey
            path: private.pem
          defaultMode: 420
    extraVolumeMounts: |
      - name: oisp-realm-secret
        mountPath: "/realms"
        readOnly: false
      - name: jwt-keys
        mountPath: "/keys"
        readOnly: true
    service:
      httpPort: 4080
      httpsPort: 4043
    username: keycloak
    password: intel123
    persistence:
      deployPostgres: false
      dbVendor: postgres
      dbName: oisp
      dbHost: postgres
      dbPort: "5432"
      dbUser: superuser
      dbPassword: supersecret
  frontend:
    secret: "supersecret"

jwt:
  public: "No key set"
  private: "No key set"
  x509: "No cert set"

postgres:
  username: oisp_user
  password: supersecret

# Docker image tag
tag: latest

# Enable jaeger tracing
jaeger_tracing: false

# Sets resource limits lower to test locally
# or on smaller cluster when set to true
less_resources: true
