name: End2End Test

on:
  workflow_call:
    inputs:
      UPGRADE_TEST:
        description: 'Set to "true" to enable version upgrade testing before E2E testing'
        default: ''
        required: false
        type: string
      CURRENT_RELEASE_VERSION:
        description: 'Release version to upgrade from, must be a valid docker tag'
        default: ''
        required: false
        type: string
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop
      - '**-debugtest'
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: recursive
    - name: Prepare platform
      shell: bash
      run: |
        export TERM=vt100
        cd util && \
        bash setup-ubuntu20.04.sh
    - name: Setup subrepos
      shell: bash
      run: |
        export TERM=vt100
        #git submodule update --recursive --init
        make update

    - name: Build platform
      run: |
        set +o pipefail
        export TERM=vt100
        yes | DOCKER_TAG=test NODOCKERLOGIN=true DEBUG=true make build

    - name: E2E Test
      shell: bash
      run: |
        set +e
        export TERM=vt100
        export PATH=$PATH:/snap/bin
        make import-images DOCKER_TAG=test DEBUG=true
        docker image prune -a -f
        rm -rf oisp-*
        npm install nodemailer
        export NODOCKERLOGIN=true
        retval=2;
        export DOCKER_TAG=test
        export USE_LOCAL_REGISTRY=true
        # If CURRENT_RELEASE_VERSION is set, do an upgrade test from the release version to latest
        if [[ ${{ inputs.UPGRADE_TEST }} = "true" ]] && [[ -n ${{ inputs.CURRENT_RELEASE_VERSION }} ]];
        then
          export DOCKERLOGIN=${{ secrets.DOCKER_USERNAME }}
          export DOCKERPASS=${{ secrets.DOCKER_PASSWORD }}
          export DOCKER_TAG=${{ inputs.CURRENT_RELEASE_VERSION }}
          export USE_LOCAL_REGISTRY=false
        fi
        until [ ${retval} -eq 0 ] || [ ${loops} -gt 3 ]; do
          make undeploy-oisp
          (for i in {1..20}; do sleep 60; echo .; done&) &&  make deploy-oisp-test
          if [[ ${{ inputs.UPGRADE_TEST }} = "true" ]] && [[ -n ${{ inputs.CURRENT_RELEASE_VERSION }} ]];
          then
            (for i in {1..20}; do sleep 60; echo .; done&) && make wait-until-ready
            (for i in {1..20}; do sleep 60; echo .; done&) &&  make upgrade-oisp DOCKER_TAG=test USE_LOCAL_REGISTRY=true KEYCLOAK_FORCE_MIGRATION="true"
            kubectl -n $(NAMESPACE) scale deployment debugger --replicas=1
          fi
          make test
          retval=$?
          loops=$((loops+1))
        done
        echo Test return value: ${retval}
        exit ${retval}
    - name: debug with upterm
      if: failure()
      uses: lhotari/action-upterm@v1
