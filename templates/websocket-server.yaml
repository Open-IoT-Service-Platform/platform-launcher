apiVersion: v1
kind: Service
metadata:
  labels:
    app: websocket-server
  name: websocket-server
spec:
  ports:
  - port: 5000
  selector:
    app: websocket-server
  sessionAffinity: ClientIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket-server
  labels:
    app: websocket-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: websocket-server
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: websocket-server
    spec:
      containers:
      - name: websocket-server
        image: oisp/websocket-server:latest
        ports:
        - containerPort: 5000
          protocol: TCP
        args:
        - ./wait-for-it.sh
        - postgres:5432
        - -t
        - "300"
        - --
        - ./scripts/docker-start.sh
        env:
        - name: NODE_ENV
          value: local
        - name: OISP_WEBSOCKET_SERVER_CONFIG
          valueFrom:
            configMapKeyRef:
              name: oisp-config
              key: websocket-server
        - name: OISP_POSTGRES_CONFIG
          valueFrom:
            configMapKeyRef:
              name: oisp-config
              key: postgres
        - name: OISP_KAFKA_CONFIG
          valueFrom:
            configMapKeyRef:
              name: oisp-config
              key: kafka
        - name: OISP_WEBSOCKETUSER_CONFIG
          valueFrom:
            configMapKeyRef:
              name: oisp-config
              key: websocket-user
        volumeMounts:
        - mountPath: /app/keys
          name: jwt-keys
          readOnly: true
        workingDir: /app
      imagePullSecrets:
      - name: dockercred
      hostname: websocket-server
      volumes:
      - name: jwt-keys
        secret:
          defaultMode: 420
          items:
          - key: jwt.publickey
            path: public.pem
          - key: jwt.privatekey
            path: private.pem
          secretName: oisp-secrets
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: dashboard-ws
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.org/proxy-connect-timeout: "3600"
    nginx.org/proxy-read-timeout: "3600"
    nginx.org/websocket-services: websocket-server
  creationTimestamp: null
  generation: 1
spec:
  rules:
  - host: ws.iot.example.com
    http:
      paths:
      - backend:
          serviceName: websocket-server
          servicePort: 5000
